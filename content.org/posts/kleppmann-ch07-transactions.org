# -*- mode: org -*-
#+HUGO_BASE_DIR: ../..
#+HUGO_SECTION: posts
#+HUGO_WEIGHT: 2000
#+HUGO_AUTO_SET_LASTMOD: t
#+TITLE: "Kleppmann Chapter 07 - Transactions"
#+DATE: 2019-10-25T17:50:20-07:00
#+HUGO_TAGS: db transactions scalable kleppmann
#+HUGO_CATEGORIES: kleppmann 
#+HUGO_MENU_off: :menu "main" :weight 2000
#+HUGO_CUSTOM_FRONTMATTER: :foo bar :baz zoo :alpha 1 :beta "two words" :gamma 10 :mathjax true
#+HUGO_DRAFT: false

#+STARTUP: indent hidestars showall

* Definition of transaction
- a group of several reads and writes
- logical unit - looks like one operation
- all or nothing (commit or abort/rollback)

* Who needs transactions
- when you need certain guarantees

* Acid
- Atomicity - abortability (resiliant to faults)
- Consistency - some invariants about the data must be true
- Isolation - concurrent transactions are isolated
  - serializability - too strong
- Durability - committed means data will not be lost
  - there is no perfect guarantee

* Base
- Basically Available, Soft state, and Eventual consistency

* Single-Object vs Multi-Object Operations
- many writes
  - atomicity : all written or none
  - isolation : one transaction cannot see a partial write of another
- identify multi-object transaction
  - tie to client's TCP connection - bad
  - separate transaction id

** Single object writes
- Storage engine
  - atomicity : log for crash recovery
  - isolation : using a lock
  - atomic operations
    - increment
    - compare-and-set

** Multi-object transactions
- when do you need them?
  - hard because of partitioning
  - foreign key in another table - make sure references are valid
  - document data model - require denormalization
    - when update happens several documents changed
  - secondary indexes

** Handling errors and aborts
- abort and retry failures
  - network failures
    - app doesn't get ACK
  - overload
    - exponential backoff - limit number of retries
  - permanent errors 
  - side effects of transactions : emails
  - client fails in retry

* Weak Isolation Levels
- serializable isolation too costly
** Read committed
- When reading from DB, only read committed data
  - no dirty reads, why
    - don't want to read several modifications in a transaction
    - don't want to read something that gets rollback
- Where writing to DB, only overwrite data that has been committed
  - no dirty writes, why
    - A and B try to buy same car, listing and sales DB, invoice ovrwrt
    - read committed does not prevent race condition btw counter increment
- Implementation
  - row-level locks for duration of transaction
  - lock for reads slows down the system
    - instead DB returns only returns committed reads
** Snapshot isolation / repeatable read
- read committed failures
  - read skew or nonrepeatable read
    - Reading from two accounts where transfer happens in between reading
      - read $500 in one account
      - transfer happened in between, moving $100 from one account to another
      - read $400 in another account
  - Backups
    - backing up while updates are happening
      - parts of the backup with have older data -- inconsistent
  - Analytic queries and integrity checks
  
* Snapshot isolation 
- Transaction reads from a consistent snapshot of the database
  - sees all the data that was committed at the start of the transactoin
- Implementation
  - wite locks to prevent dirty writes
  - no locks on reads
    - DB keeps different committed versions of an object
      - multi-version concurrency control (MVCC)
  - for read committed
    - use a separate snapshot for each query
  - for snapshot isolation
    - us a single snapshot for the whole transactoin
  - each transaction is given an always increasing transaction ID (txid)
    - each row has a created_by field, the txid
    - each row has a deleted_by field, the txid
      - when no transactions access deleted data can GC
  - on read use txid to decide which objects it can see and which are
    invisible
