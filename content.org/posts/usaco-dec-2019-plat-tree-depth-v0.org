# -*- mode: org -*-
#+HUGO_BASE_DIR: ../..
#+HUGO_SECTION: posts
#+HUGO_WEIGHT: 2000
#+HUGO_AUTO_SET_LASTMOD: t
#+TITLE: "Tree Depth - USACO Platimum Dec19"
#+DATE: 2020-01-15T23:21:28-08:00
#+HUGO_TAGS: "generating functions" trees permutations 
#+HUGO_CATEGORIES: usaco
#+HUGO_MENU_off: :menu "main" :weight 2000
#+HUGO_CUSTOM_FRONT_MATTER: :foo bar :baz zoo :alpha 1 :beta "two words" :gamma 10 :mathjax true
#+HUGO_DRAFT: false

#+STARTUP: indent hidestars showall

This is a commentary on the solution from Benjamin Qi.

* from permutation to tree generation
Before we go into the solution of this problem it is good to be able to
understand how to create trees using a permutation.

First how does a permutation $a$ translate into a tree? The way to think about
$a[i]$ is when the $i$th node will be added to the tree. For example say $a$ is
$42315$. Let's use 1 indexing to refer to both the index in $a$ and also the
name of the node.

Then since $a[4]$ is 1 then it will be at the root. This divides the tree into
to parts (it is a BST). Since there is only one more node to the right of 4 we
will just add node 5 as a right child of 4.

For the left subtree, again we find the next smaller index, in this case $a[2]$,
this means that 2 will be the left child of 4. Since there are only to remaining
nodes on the either side of 2, 1 and 3 will be on both left and right leaves of
2 respectively.

* from permutation $a$ to depth of nodes
Let's take node 3 in the example above.  Node 3 is at a depth of 3 (note root is
at depth of 1 according to the problem).  Can we figure out the depth of node 3
from the permutation $42315$?

So let's look to the left of $a[3]$ can either $1$ or $2$ be an ancestor of $3$.
$2$ can since it come earlier than $3$ ($a[2] < a[3]$).  One can make a similar
argument to the right of $3$, node $4$ can be an ancestor of $3$, since 
$a[4] < a[3]$.  Since $3$ is an ancestor of two nodes $2$ and $4$ its depth
must be 3.  Note the independence of the previous statement, it doesn't 
matter whether $2$ is below or above $4$ from $3$'s perspective, it only
needs to know how many ancestors are above it.  This will come in handy
later and it is a fundamental thing to understand about trees.

Node $3$ was kind of obvious, we look to the left and right and found two
nodes that were ancestors to it.  If we examine node $1$ it is a little
bit more tricky.  If you apply the same logic as before, nodes $2,3,4$ all
have $a[2 .. 4] < a[1]$ they could all be potential ancestors for $1$.
If think of them in order, however, perhaps you will note the following.
For $a[4]$, it is clear that it is the root, everything to its right is
irrelevant to $1$.  For $3$ it is not clear whether it is an ancestor
of $1$.  $1$ could be a potential lie on $3$'s left branch from its positioning,
unless there is a node between $3$ and $1$ that causes separates them into
separate branches.  Indeed there is such a node: $2$ comes before $3$ and
therefore separates $1$ from $3$ into different subtrees.  In fact when
examining node $3$ we just have to find a node $j$ between $1$ and $3$
such that $a[j] < a[3]$.  To even simplify further, we need to look for
the minimum node $j$ to separate the two sides, potentially discarding
further nodes which lie on a separate branch.

So in general when we look at the possible ancestors for node $i$, and
consider a node $j \ne i$, we only need to find the some minimum between
$a[i .. j]$ to determine if $a[j]$ could be a potential ancestor.  This
is the symmetric for a point $j$ to the left of $i$.

Thus one comes to the following formula for Benjamin's solution:

$$
d_i(a)=1+\sum_{1\le j<i}(a[j] == \min(a[j\ldots i]))+\sum_{i<j\le n}(a[j] ==
\min(a[i\ldots j])).
$$

The first $1$ on the RHS, denotes the default depth of the root, then 
the first sum denotes the elements to the left of node $i$ and the second sum
denotes the elements to the right of node $i$.   It would have been a little bit
clearer to but the indicator function in front of the condition.

$$
d_i(a)=1+\sum_{1\le j<i}\bold{1}(a[j] == \min(a[j\ldots i]))+\sum_{i<j\le n}\bold{1}(a[j] ==
\min(a[i\ldots j])).
$$

