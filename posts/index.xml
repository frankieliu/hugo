<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on My New Hugo Site</title>
    <link>https://frankliu.org/hugo/posts/</link>
    <description>Recent content in Posts on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 14 Sep 2019 19:10:31 -0700</lastBuildDate>
    
	<atom:link href="https://frankliu.org/hugo/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>920 Number of music playlists</title>
      <link>https://frankliu.org/hugo/posts/920-number-of-music-playlists/</link>
      <pubDate>Fri, 30 Aug 2019 19:13:32 -0700</pubDate>
      
      <guid>https://frankliu.org/hugo/posts/920-number-of-music-playlists/</guid>
      <description>Notes on solution to Leetcode 920 Let&amp;rsquo;s take the example from the article, songs: \(\left\{abcde\right\}\), playlist: \(abacabdcbaeacbd\),
\(\bar{x} = (1,2,4,7,11)\)
For \(\bar{x}\), each number in the n-tuple indicates a position in the playlist for the first occurrence of a particular unique song. The article uses 1-indexing so I will use the same to be consistent.
As an example for the \(\bar{x}\) above, consider the playlist family:
\(p_l = (1_1,2_2,c_3,3_4,c_5,c_6,4_7,c_8,c_9,c_{10},5_{11},c_{12},c_{13},c_{14})\)</description>
    </item>
    
    <item>
      <title>Setting up mathjax for hugo</title>
      <link>https://frankliu.org/hugo/posts/mathjax-hugo/</link>
      <pubDate>Sat, 14 Sep 2019 19:10:31 -0700</pubDate>
      
      <guid>https://frankliu.org/hugo/posts/mathjax-hugo/</guid>
      <description> Problem Adding mathjax support for posts
Solution  Modify the current theme Add a partial template Add a parameter called mathjax: true in the frontmatter  Details Modifying the current theme  Note that the current theme is set in config.tolm   theme = &amp;#34;ananke&amp;#34; def add: return 1+1</description>
    </item>
    
    <item>
      <title>Fb Distributed Data Store Tao</title>
      <link>https://frankliu.org/hugo/posts/fb-distributed-data-store-tao/</link>
      <pubDate>Fri, 30 Aug 2019 19:13:32 -0700</pubDate>
      
      <guid>https://frankliu.org/hugo/posts/fb-distributed-data-store-tao/</guid>
      <description>intro   read-optimized social graph memcache and look-aside    The distinction between look-aside and look-through caches is not whether data is fetched from the cache and memory in serial or in parallel. The distinction is whether the fetch to memory on a cache miss originates from the caller or the cache. If the fetch to memory originates from the caller on cache miss, then youâ€™re using a look-aside cache.</description>
    </item>
    
  </channel>
</rss>