<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Articles on My New Hugo Site</title>
    <link>https://www.frankliu.org/hugo/posts/</link>
    <description>Recent content in Articles on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Mar 2017 12:00:00 -0500</lastBuildDate>
    
	<atom:link href="https://www.frankliu.org/hugo/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>818 Race Car</title>
      <link>https://www.frankliu.org/hugo/posts/818-race-car/</link>
      <pubDate>Tue, 11 Aug 2020 20:56:27 -0700</pubDate>
      
      <guid>https://www.frankliu.org/hugo/posts/818-race-car/</guid>
      <description>Proof Consider overshooting \(t\) by \(2^{n}-1\), where \(n\) is the smallest integer that overshoots the target.
We would like to prove considering a jump \(2^{n+1}-1\) is not going to yield a shorter set of actions.
Note that \(t\) is in \([2^{n-1},2^n-2]\), so from point A we have a remaining distance in \([2^n+1, 3(2^n)-1]\). Again if we consider the possible jumps from A, either we jump to \(2^{n}-1\) or \(2^{n+1}-1\). Of course we will not take \(2^{n+1}-1\) because that would mean we arrive back at the beginning.</description>
    </item>
    
    <item>
      <title>Codeforces Till-I-Collapse (Part III)</title>
      <link>https://www.frankliu.org/hugo/posts/till-i-collapse-iii/</link>
      <pubDate>Tue, 30 Jun 2020 15:22:25 -0700</pubDate>
      
      <guid>https://www.frankliu.org/hugo/posts/till-i-collapse-iii/</guid>
      <description>extent of region We begin with the segment tree version. Note that Ershov uses a version of the segment tree where the right side of the range of responsibility is open, i.e. \([3,4)\) is equivalent to \([3,3]\)
The function get below will find the size of the largest range whose prefix sum is \(k\).
int get(int v, int vl, int vr, int &amp;amp;k) { if (k &amp;gt;= st[v]) { k -= st[v]; return vr - vl; } if (vl == vr - 1) { return 0; } int mid = (vl + vr) / 2; int res = get(v * 2, vl, mid, k); if (res == mid - vl) { res += get(v * 2 + 1, mid, vr, k); } return res; } It does so by allowing the \(k\) to go down to \(0\), while there are empty ranges the recursion goes to the right child, until it reaches a single element range containing an element (\(&amp;gt;0\)) at which point it returns \(0\).</description>
    </item>
    
    <item>
      <title>Codeforces Till-I-Collapse (Part II)</title>
      <link>https://www.frankliu.org/hugo/posts/till-i-collapse-ii/</link>
      <pubDate>Mon, 29 Jun 2020 14:14:24 -0700</pubDate>
      
      <guid>https://www.frankliu.org/hugo/posts/till-i-collapse-ii/</guid>
      <description>credits It is interesting that MiFaFAOvO&amp;rsquo;s solution has the same pieces are ershov.stanislav&amp;rsquo;s solution. In fact they both use the worm method (my own naming for subsequence like states). What is interesting from MiFaFAOvO&amp;rsquo;s solution is that he uses a BIT to solve the problem.
what kind of tree is a BIT While the update part of a BIT is pretty straightforward one may wonder at the reverse query part which was done in ershov&amp;rsquo;s solution \(O(\log n)\).</description>
    </item>
    
    <item>
      <title>Codeforces Till-I-Collapse</title>
      <link>https://www.frankliu.org/hugo/posts/till-i-collapse/</link>
      <pubDate>Sun, 28 Jun 2020 06:56:36 -0700</pubDate>
      
      <guid>https://www.frankliu.org/hugo/posts/till-i-collapse/</guid>
      <description>credit This is ershov.stanislav&amp;rsquo;s solution to the problem.
summary of problem Given an array of integers (colors), find the mininum nunber of consecutive grouping containing at most \(k\) colors (number of unique integers in a subarray).
greedy For a single \(k\) one can take \(O(n)\) time to greedily scan through the array and accumulate \(k\) unique integers at a time.
problem size However, given the size of the problem (\(10^5\)) and the fact that we must do this for \(k \in {1,\cdots,n}\) implies that we must look for a better solution.</description>
    </item>
    
    <item>
      <title>Codeforces-190-Div1-E Ciel and Gondolas</title>
      <link>https://www.frankliu.org/hugo/posts/codeforces-190-div1-e/</link>
      <pubDate>Fri, 05 Jun 2020 06:34:39 -0700</pubDate>
      
      <guid>https://www.frankliu.org/hugo/posts/codeforces-190-div1-e/</guid>
      <description>E. Ciel and Gondolas Fox Ciel went into an amusement park. She is in line for the Ferris wheel. There are \(n\) foxes in the queue. We will assume that the first fox is at the beginning of the queue, and the \(n\) th fox is at the tail of the queue.
In total there are \(k\) gondolas. We distribute foxes into gondolas as follows:
When the first gondola swims up, \(q_1\) foxes enter from the front of the line into the gondola.</description>
    </item>
    
    <item>
      <title>Bomb lab</title>
      <link>https://www.frankliu.org/hugo/posts/bomb/</link>
      <pubDate>Tue, 02 Jun 2020 12:13:39 -0700</pubDate>
      
      <guid>https://www.frankliu.org/hugo/posts/bomb/</guid>
      <description>Description From Bryant and O&amp;rsquo;Hallaron&amp;rsquo;s book Computer Systems: A Programmer&amp;rsquo;s Perspective.
 http://www.cs.cmu.edu/~bryant/ http://www.cs.cmu.edu/~droh/ http://csapp.cs.cmu.edu/  One of the first labs. The Bomb Lab, contains a binary bomb that must be diffused, by disassembling the executable.
sample bomb A sample bomb can be obtained here.
 http://csapp.cs.cmu.edu/3e/labs.html  problem set and blog Here are a couple of helpful resources:
 https://web.stanford.edu/class/archive/cs/cs107/cs107.1174/assign5/advice.html http://zpalexander.com/binary-bomb-lab-phase-1/  name list (nm), strings, objdump These are kind of unnecessary, all can be done within gdb.</description>
    </item>
    
    <item>
      <title>Bloom, count min sketch</title>
      <link>https://www.frankliu.org/hugo/posts/bloom/</link>
      <pubDate>Sat, 30 May 2020 07:18:38 -0700</pubDate>
      
      <guid>https://www.frankliu.org/hugo/posts/bloom/</guid>
      <description>Bloom Probability of false positive Probability that BF reports positive set membership for an element that is not in the set
\[ {\displaystyle \varepsilon =\left(1-\left[1-{\frac {1}{m}}\right]^{kn}\right)^{k}\approx \left(1-e^{-kn/m}\right)^{k}.} \]
\(k\) is the number of hash functions, \(m\) is the number of bits in the array, and \(n\) is the number of entries inserted into the table.
Obviously increasing \(m\) and decreasing \(n\) would decrease the \(\varepsilon\) however \(k\) has a optimal point.</description>
    </item>
    
    <item>
      <title>Google File System</title>
      <link>https://www.frankliu.org/hugo/posts/google-gfs/</link>
      <pubDate>Sat, 09 May 2020 10:08:17 -0700</pubDate>
      
      <guid>https://www.frankliu.org/hugo/posts/google-gfs/</guid>
      <description>5.1 High Availability Chunk Replication  RF of 3 master clones existing replicas when chunkservers go offline or detect corrupted replicas  Master Replication  operation log and checkpoints replicas &amp;ldquo;shadow&amp;rdquo; masters provide read-only access  file metadata like directory contest could be stale reads replica information from logs pools from chunkservers to locate chunk replicas depends on primary for decisions to create and delete replicas    5.2 Data Integrity  impractical to very replica data between replicas use 32bit checksum on 64KB blocks  stored persistently with logging and separate from user data   in reads:  chunkserver verifies the checksum before returning data client reads from another replica master creates a different replica and delete the corrupted one   in appends:  incrementally update the checksum for last partial checksum blocks even if last partial checksum is corrupted, new checksum value will not match stored data and corruption will be detected   in writes:  if write overwrites an existing range on the chunk, need to verify the first and last blocks of the range being overwritten calculate new checksums based from previous checksum so that corruption of unchanged areas will be detected    6 Measurements  1 master, two master replicas, 16 chunkservers, and 16 clients  6.</description>
    </item>
    
    <item>
      <title>Ascii Diagrams</title>
      <link>https://www.frankliu.org/hugo/posts/asciio/</link>
      <pubDate>Wed, 29 Apr 2020 11:37:40 -0700</pubDate>
      
      <guid>https://www.frankliu.org/hugo/posts/asciio/</guid>
      <description>Asciio Modifications  clone P5-App-Asciio change the zoom in and zoom out keys  ./setup/actions/unsorted.pl:	&amp;lsquo;Zoom in&amp;rsquo; =&amp;gt; [&amp;lsquo;000-plus&amp;rsquo;, \&amp;amp;zoom, 1]
Building prep perl Build.PL
Dependencies In Ubuntu most dependencies can be resolved by
sudo aptitude install lib&amp;lt;Module&amp;gt;-&amp;lt;Submodule&amp;gt;-perl For example if the dependencies require `Foo::Bar`, install it with `sudo aptitude install libfoo-bar-perl`
Hash::Slice unfortunately is not part of Ubuntu distribution so you will have to install it via CPAN
cpan Hash::Slice Building .</description>
    </item>
    
    <item>
      <title>git cheatsheet</title>
      <link>https://www.frankliu.org/hugo/posts/git-cheat-sheet/</link>
      <pubDate>Wed, 29 Apr 2020 11:33:30 -0700</pubDate>
      
      <guid>https://www.frankliu.org/hugo/posts/git-cheat-sheet/</guid>
      <description>Upstream and origin   </description>
    </item>
    
    <item>
      <title>A-star</title>
      <link>https://www.frankliu.org/hugo/posts/a-star/</link>
      <pubDate>Tue, 21 Apr 2020 19:15:00 -0700</pubDate>
      
      <guid>https://www.frankliu.org/hugo/posts/a-star/</guid>
      <description>Heuristic paper &amp;ldquo;A Formal Basis for the Heuristic Determination of Minimum Cost Paths&amp;rdquo;, Peter E. Hart, Nils J. Nilsson, and Bertram Raphael.
Definitions For any subgraph \(G_s\) and any goal set \(T\) and starting state \(s\):
Let \(f^*(n)\) be the actual cost of an optimal path constrained through \(n\), from \(s\) to \(n\) to a preferred goal node \(n\).
From this definition, the (&amp;lsquo;unconstrained&amp;rsquo;) optimal path can be written as \(f^*(s) = h^*(s)\), where \(h^*(n)\) is the optimal path from node \(n\) to the preferred goal node of \(s\).</description>
    </item>
    
    <item>
      <title>Flink</title>
      <link>https://www.frankliu.org/hugo/posts/flink/</link>
      <pubDate>Sat, 18 Apr 2020 08:49:58 -0700</pubDate>
      
      <guid>https://www.frankliu.org/hugo/posts/flink/</guid>
      <description>What is it  a distributed runtime uses pipelines for execution exactly-once state consistency lightweight checkpoint iterative processing windows semantics out-of-order processing  2 architecture cluster  client job manager task manager (1 or more)  client  takes a program xforms to dataflow graph submits to job manager creates data schema and serializers cost-based query optmization  job manager  coordinates distributed execution of dataflow tracks state and progress of each operator and stream schedules new operators coordinates checkpoints and recovery persists minimal set of data for checkpoint and recovery  task manager  executes one or more operators report status to job manager maintain buffer pools to buffer or materialize streams maintain network connections to exchange of streams between operators    3.</description>
    </item>
    
    <item>
      <title>Discord: creating a bot</title>
      <link>https://www.frankliu.org/hugo/posts/discord-move-bot/</link>
      <pubDate>Thu, 09 Apr 2020 15:12:31 -0700</pubDate>
      
      <guid>https://www.frankliu.org/hugo/posts/discord-move-bot/</guid>
      <description>Creating a bot on discord While there are some samples in discord.py. The API is fairly flat and hard to navigate.
Here are the links to getting started:
commands
Understanding the context The Context (ctx) is often the first argument in the functions from @bot.command. This ctx contains most of the things needed to identify the message triggering the robot to respond (ctx fields):
 guild - on which server the robot was triggered message - the message of the command author - the author of the message send() - a function that allows the robot to respond back as a response to the trigger  From this it is obvious you need some other way of getting at the channel where the message was sent.</description>
    </item>
    
    <item>
      <title>Tree longest path by dfs 2x</title>
      <link>https://www.frankliu.org/hugo/posts/longest-path-dfs-2/</link>
      <pubDate>Sun, 05 Apr 2020 07:46:12 -0700</pubDate>
      
      <guid>https://www.frankliu.org/hugo/posts/longest-path-dfs-2/</guid>
      <description>Definition of a tree (Taken from Wikipedia)
A tree is an undirected graph \(G\) that satisfies any of the following equivalent conditions:
  \(G\) is connected and acyclic (contains no cycles).
  \(G\) is acyclic, and a simple cycle is formed if any edge is added to \(G\).
  \(G\) is connected, but would become disconnected if any single edge is removed from \(G\).
  \(G\) is connected and the 3-vertex complete graph \(K_3\) is not a minor of \(G\).</description>
    </item>
    
    <item>
      <title>1197. Minimum Knight Moves</title>
      <link>https://www.frankliu.org/hugo/posts/1197-mininum-knight-moves/</link>
      <pubDate>Sun, 29 Mar 2020 22:44:44 -0700</pubDate>
      
      <guid>https://www.frankliu.org/hugo/posts/1197-mininum-knight-moves/</guid>
      <description>It is easy see that if you start in a spot in the diagonal, you can get back to the diagonal in two moves. Say E-NE followed by N-NE, where I am using the the North, South, East and West conventions. Similarly for a knight at the x-axis you can get back to the x-axis with E-NE followed by E-SE.
Let&amp;rsquo;s take a look at the diagonal section of 4,4,4 (pink), since I can get back to the diagonal in two moves, the next section has 6,6,6 (beige).</description>
    </item>
    
    <item>
      <title>Tao</title>
      <link>https://www.frankliu.org/hugo/posts/facebook-tao/</link>
      <pubDate>Sat, 21 Mar 2020 07:21:42 -0700</pubDate>
      
      <guid>https://www.frankliu.org/hugo/posts/facebook-tao/</guid>
      <description>Aggregation difficulties  content tailored to each user filter item with privacy checks for each user impossible to aggregate and filter when content is crated resolve data dependencies and privacy check each time content is viewed pull vs push social graph?  extreme read demands on graph data store    Memcache  rapid deployment  data mapping cache invalidation client code that is deployed frequently   created abstractions for graphcs  r/w objects (nodes) associations (edges) direct access to MySQL deprecated for graph data tyles    Tao  service  implements objects and association model   motivation  encapsulating failures in the PHP API access graph easily from non-PHP serivces problems with lookaside cache architecture    Inefficient edge lists  KV cache is not good semantic fit for lists of edges  queries must fetch the entire edge list  list support would help   make changes to single edge causes entire list to be reloaded  requires coordination of incremental updates to cached lists      Distributed control logic  L-A $ control logic is run on clients  clients don&amp;rsquo;t communicate with each other increases the number of failure modes difficult to avoid thundering herds  Nishtala et al.</description>
    </item>
    
    <item>
      <title>Facebook - memcached</title>
      <link>https://www.frankliu.org/hugo/posts/facebook-memcached/</link>
      <pubDate>Sat, 07 Mar 2020 07:47:47 -0800</pubDate>
      
      <guid>https://www.frankliu.org/hugo/posts/facebook-memcached/</guid>
      <description>Requirements  real-time aggregate dispersed data access hot set scale refs [1,2,5,6,12,14,34,36]  Front-end cluster    read heavy workload (100:1 R/W) wide fanout handle failures 10 Mops/s  Q: what is a wide fanout
Multiple FE clusters  single geo region control data replication data consistency 100 Mops/s  Multiple regions  muliple geo regions storage replication data consistency 1 Bops/s  Pre-memcached   High fanout    data dependency graph for a small user request  Look-aside cache   why deletes over set</description>
    </item>
    
    <item>
      <title>FFT</title>
      <link>https://www.frankliu.org/hugo/posts/fft/</link>
      <pubDate>Fri, 06 Mar 2020 08:22:35 -0800</pubDate>
      
      <guid>https://www.frankliu.org/hugo/posts/fft/</guid>
      <description>polynomials \[ f(x) = A_0 + A_1 x + A_2 x^2 + \cdots + A_{n-1} x^{n-1} \]
roots \begin{eqnarray} x^{n} &amp;amp;=&amp;amp; 1 \\\
x &amp;amp;=&amp;amp; e^{i \frac{2\pi}{n}} \end{eqnarray}
Call \(e^{i \frac{2\pi}{n}} = w_n\) the fundamental, then there are \(n\) such roots, \(w_n^k\) for \(k = 0,\cdots,n-1\).
The fourier transform is a vector of the polynomial evaluated at each of the \(k\) roots.
\[ F(k) = f(w_n^k) \]
The FFT is a divide and conquer algorithm where instead of doing \(O(n)\) computations for each fourier coefficient \(F(k)\), we break up the problem into 2 subproblems of size \(n/2\) and do a merge which is of order \(n\).</description>
    </item>
    
    <item>
      <title>Errichto - segment tree</title>
      <link>https://www.frankliu.org/hugo/posts/ericcto-segment-tree/</link>
      <pubDate>Fri, 07 Feb 2020 16:03:25 -0800</pubDate>
      
      <guid>https://www.frankliu.org/hugo/posts/ericcto-segment-tree/</guid>
      <description>Segment tree   Preliminaries The data structure in this segment tree information according to Antti Laaksonen in the Competitive Programmer&amp;rsquo;s Handbook comes from
[62] P. Stańczyk. Algorytmika praktyczna w konkursach Informatycznych, MSc thesis, University of Warsaw, 2006.
Basically the original range is stored at some offset that correspond to largest power of two that is greater or equal to the size of the range. For example a size 16 array would be stored at an offset of 16 in the array.</description>
    </item>
    
    <item>
      <title>Craq - Terrace and Freedman</title>
      <link>https://www.frankliu.org/hugo/posts/craq-terrace-freedman/</link>
      <pubDate>Fri, 07 Feb 2020 08:23:32 -0800</pubDate>
      
      <guid>https://www.frankliu.org/hugo/posts/craq-terrace-freedman/</guid>
      <description>questions  what is the interface provided  simple k,v store    what are the guarantees discussed  strong and eventual consistency  chain replication  where are requests handled?  write at head read at tail   what is the dotted line going back from tail to head  reply to the &amp;ldquo;write&amp;rdquo; client - committed   why is this cheaper than other topologies  because of pipelining of the writes down the chain   what consistency does CR achieve?</description>
    </item>
    
    <item>
      <title>USACO Jan 2020 Bronze - Race</title>
      <link>https://www.frankliu.org/hugo/posts/usaco-jan-2020-bronze-race/</link>
      <pubDate>Sun, 02 Feb 2020 09:58:03 -0800</pubDate>
      
      <guid>https://www.frankliu.org/hugo/posts/usaco-jan-2020-bronze-race/</guid>
      <description>\(O(1)\) solution I am surprised that the solution posted is \(O(n)\) since \(n\) can be as large as \(10^9\).
In coming up with a solution for \(O(1)\) we consider three phases. The first phase accelerates the &amp;lsquo;left hand&amp;rsquo; speed until it reaches the terminal speed. If it can&amp;rsquo;t reach the terminal speed then it just reaches whatever speed it can and terminates.
The second phase is like a palindrome stage, where I remove similar increasing speeds from both ends, kind of like climbing up a tall peak from both ends.</description>
    </item>
    
    <item>
      <title>Minimax - alpha beta pruning</title>
      <link>https://www.frankliu.org/hugo/posts/alpha-beta-pruning/</link>
      <pubDate>Sat, 01 Feb 2020 18:50:57 -0800</pubDate>
      
      <guid>https://www.frankliu.org/hugo/posts/alpha-beta-pruning/</guid>
      <description>Normal pruning   Imagine you are given the following problem: Find the depth of the the leaf closest to the root of a tree.
def smallest_depth(node, depth): if node is None: return depth - 1 a = smallest_depth(node.left, depth + 1) b = smallest_depth(node.right, depth + 1) return min(a, b) You could improve this a little bit by passing some information to your children:
def smallest_depth(node, smallest_sofar, depth): if node is None: return depth - 1 if depth &amp;gt;= smallest_sofar: return depth a = smallest_depth(node.</description>
    </item>
    
    <item>
      <title>Appscript - Sheets</title>
      <link>https://www.frankliu.org/hugo/posts/appscript-sheets/</link>
      <pubDate>Sat, 01 Feb 2020 17:17:12 -0800</pubDate>
      
      <guid>https://www.frankliu.org/hugo/posts/appscript-sheets/</guid>
      <description>Getting started Appscript is pretty powerful and free, it is javascript with google api for manipulating things.
 Begin with a sheets document. Open tools/script editor Write in Code.gs Rename to some  Run with the triangle button Ctrl + Enter to see the Log Save it  Since most of the time I am operating on some selected range, you would first select on some cells before running the script.</description>
    </item>
    
    <item>
      <title>Bellman-Held-Karp Hamiltonian path and Traveling Salesman</title>
      <link>https://www.frankliu.org/hugo/posts/bellman-held-karp/</link>
      <pubDate>Tue, 28 Jan 2020 22:40:15 -0800</pubDate>
      
      <guid>https://www.frankliu.org/hugo/posts/bellman-held-karp/</guid>
      <description>Figure below with mypaint and a Bamboo tablet on Ubuntu   Floyd-Warshall connection This section can be skipped, because it is basically my own brain mapping of this problem, since I feel there are some similarities with Floyd-Warshall.
For FW, I think of a source and destination pair \(i\) and \(j\) going through some intermediate node \(k\), and relaxing in a reverse triangle inequality kind of way, i.e.
\[ d[i][j] := \min(d[i][j], d[i][k] + d[k][j]) \]</description>
    </item>
    
    <item>
      <title>Hugo: custom css, social-follow, svg, baseurl, comments</title>
      <link>https://www.frankliu.org/hugo/posts/hugo-css-svg-social/</link>
      <pubDate>Thu, 23 Jan 2020 14:50:02 -0800</pubDate>
      
      <guid>https://www.frankliu.org/hugo/posts/hugo-css-svg-social/</guid>
      <description>hugo social buttons It stated with wanting to add social buttons on my web page. This was as easy as changing the config.toml file. For Ananke theme, it is looking for some parameters, in the [params] sections. Just add you link to facebook, twitter, etc as facebook = &amp;quot;https://www.facebook.com/ID&amp;quot;.
case of missing id I was upset that it had a slack link available, but no discord one. One because I don&amp;rsquo;t even know what is one&amp;rsquo;s slack id.</description>
    </item>
    
    <item>
      <title>Leetcode 1320. Minimum Distance to Type a Word Using Two Fingers</title>
      <link>https://www.frankliu.org/hugo/posts/1320-mininum-distance-to-type-a-word-using-two-fingers/</link>
      <pubDate>Mon, 20 Jan 2020 23:22:01 -0800</pubDate>
      
      <guid>https://www.frankliu.org/hugo/posts/1320-mininum-distance-to-type-a-word-using-two-fingers/</guid>
      <description>Analysis of lee215&amp;rsquo;s solution Lee already explained fairly well how to get the 1D dp. I just want to expound a little bit because there is a heavy dose of intuition that I believe is very beneficial for other problems.
Intuition One of the first things that one tries when playing with this problem is figuring out when the second finger comes into the picture. I applaud the earlier posts in assuming a special starting position for both fingers, so that there is nothing special about when it transitions from one finger to two fingers.</description>
    </item>
    
    <item>
      <title>Zookeeper 2.3</title>
      <link>https://www.frankliu.org/hugo/posts/zookeeper-2-3/</link>
      <pubDate>Sat, 18 Jan 2020 19:24:37 -0800</pubDate>
      
      <guid>https://www.frankliu.org/hugo/posts/zookeeper-2-3/</guid>
      <description>api  We recapped re the API. Basically try to derive it yourself. Next divide which ones are write vs read related. Note that the read related contain a watch. Note that the write related contain a version.  guarantees or promises  Next we guessed what are zookeeper promises Why have these two promises Why A-linearizable?  async vs sync  what part of the writing is async? example is large configuration file what does it mean to be pipelined and issued asynchronously  when a client issues a change, when does the system respond back with an ack?</description>
    </item>
    
    <item>
      <title>Tree Depth - USACO Platimum Dec19</title>
      <link>https://www.frankliu.org/hugo/posts/usaco-dec-2019-plat-tree-depth/</link>
      <pubDate>Wed, 15 Jan 2020 18:21:28 -0800</pubDate>
      
      <guid>https://www.frankliu.org/hugo/posts/usaco-dec-2019-plat-tree-depth/</guid>
      <description>This is a commentary on the solution from Benjamin Qi.
from permutation to tree generation Before we go into the solution of this problem it is good to be able to understand how to create a tree using a permutation.
First how does a permutation \(a\) translate into a tree? Think of \(a[i]\) as the time in which node \(i\) is inserted to the tree. We&amp;rsquo;ll use the following \(a=42315\) for illustration.</description>
    </item>
    
    <item>
      <title>Blackhole - Recording Sound Output in Macbook</title>
      <link>https://www.frankliu.org/hugo/posts/blackhole/</link>
      <pubDate>Thu, 28 Nov 2019 18:10:58 -0800</pubDate>
      
      <guid>https://www.frankliu.org/hugo/posts/blackhole/</guid>
      <description>blackhole installation https://github.com/ExistentialAudio/BlackHole
mix output  command space - midi audio midi setup click on the plus sign at bottom left add a multi-output device should contain built in output and add blackhole you can adjust the volume (I can&amp;rsquo;t seem to be able to do that)  setting the input  there are two options  all input  command space - sound change the input to default to blackhole  specific input  quicktime start screen recording next to the record button there is a settings button arrow (small) set the device to blackhole  </description>
    </item>
    
    <item>
      <title>Rectangle counting</title>
      <link>https://www.frankliu.org/hugo/posts/rectangle-problem/</link>
      <pubDate>Wed, 20 Nov 2019 23:21:28 -0800</pubDate>
      
      <guid>https://www.frankliu.org/hugo/posts/rectangle-problem/</guid>
      <description>The problem is to count the number of rectangles (aligned to x and y coordinates) that can be formed by a set of points. Answer from competitive programmer Errichto.
def num_rect(points): m = defaultdict(lambda: 0) answer = 0 for p in points: for p_above in points: if p.y &amp;lt; p_above.y: answer += m[(p.y,p_above.y)] m[(p.y,p_above.y)] += 1 return answer Consider the following set of points:
   x x x     1 2 3    This is for k = 3, there are 3 possible rectangles.</description>
    </item>
    
    <item>
      <title>Leetcode 460. LFU Cache</title>
      <link>https://www.frankliu.org/hugo/posts/460-lfu-cache/</link>
      <pubDate>Mon, 18 Nov 2019 14:40:38 -0800</pubDate>
      
      <guid>https://www.frankliu.org/hugo/posts/460-lfu-cache/</guid>
      <description>Requirements  O(1) insertion  requires O(1) getting the least frequently used    Suggested data structures  f: a map from frequency to a tuple containing the head and tail of a portion of a double linked list kv: a map from key to a node in the double linked list dll: a double linked list where the least frequent item is at the head of the list node: element of dll, containing frequency info, as well a prev, next, value, the usual stuff    put(a,v)  find corresponding node via kv[a] delete head of double linked list and update f accordingly delete node from its current position and insert it at the head of the next frequency, i.</description>
    </item>
    
    <item>
      <title>Starting hugo from scratch</title>
      <link>https://www.frankliu.org/hugo/posts/deep-learning-book-setup/</link>
      <pubDate>Tue, 05 Nov 2019 19:03:13 -0800</pubDate>
      
      <guid>https://www.frankliu.org/hugo/posts/deep-learning-book-setup/</guid>
      <description>deploying hugo to github.io There are a number of ways of doing this. Since I like to keep a separate branch for the deployment, I opted for the option below. Another option would be use a docs directory and add to config.toml a line with publishDir = &amp;ldquo;docs&amp;rdquo;. This would also work, and you then just need to work on master branch.
This method of maintaining a separate branch is made easier with a worktree that directly writes to a public folder in gh-pages from the master branch.</description>
    </item>
    
    <item>
      <title>Klepmann Chapter 9 Consistency and Consensus</title>
      <link>https://www.frankliu.org/hugo/posts/kleppmann-ch09-consistency/</link>
      <pubDate>Sat, 02 Nov 2019 12:05:45 -0700</pubDate>
      
      <guid>https://www.frankliu.org/hugo/posts/kleppmann-ch09-consistency/</guid>
      <description>Consistency Guarantees eventual consistency  eventually data converges  different than transaction isolation  isolation - avoid race conditions due to concurrent execution consistency - about coordinating replica state  levels  strongest - linearizability causality and total ordering commit in a distributed system consensus problem  Linearizability  one replica illusion (one copy of the data) guarantee read is most recent - recency guarantee read A / write C / read A ok read A / begin write C / read B / end write C / read A not ok read is concurrent with the write  linearizability, 1 always follows 1 (no flipping)   cas(x, vold, vnew)  vs Serializability  serializability is about transactions guaranteeing a sequential order linearizability is about recency guarantees on read and write  importance locking and leader election  lock must be linearizable all nodes must agree on who holds the lock  zookeeper - used for distributed locking and leader election    constraints and uniqueness guarantees  enforcing uniquess (username, filename)  similar to acquiring a lock similar to cas operation   constraints that bank balance &amp;gt;= 0  two people don&amp;rsquo;t book the same flight requires a single up-to-date value for account balance or seat occupancy   uniquess constraints in DBs are linearizable foreigh key and attribute constraints can be implemented without linearizability  cross-channel timing dependencies File storage service is not linearizable, that is two requests went into it, one to store the image, and the other to resize the image.</description>
    </item>
    
    <item>
      <title>Kleppmann Chapter 07 - Transactions</title>
      <link>https://www.frankliu.org/hugo/posts/kleppmann-ch07-transactions/</link>
      <pubDate>Fri, 25 Oct 2019 17:50:20 -0700</pubDate>
      
      <guid>https://www.frankliu.org/hugo/posts/kleppmann-ch07-transactions/</guid>
      <description>Definition of transaction  a group of several reads and writes logical unit - looks like one operation all or nothing (commit or abort/rollback)  Who needs transactions  when you need certain guarantees  Acid  Atomicity - abortability (resiliant to faults) Consistency - some invariants about the data must be true Isolation - concurrent transactions are isolated  serializability - too strong   Durability - committed means data will not be lost  there is no perfect guarantee    Base  Basically Available, Soft state, and Eventual consistency  Single-Object vs Multi-Object Operations  many writes  atomicity : all written or none isolation : one transaction cannot see a partial write of another   identify multi-object transaction  tie to client&amp;rsquo;s TCP connection - bad separate transaction id    Single object writes  Storage engine  atomicity : log for crash recovery isolation : using a lock atomic operations  increment compare-and-set      Multi-object transactions  when do you need them?</description>
    </item>
    
    <item>
      <title>Vector clocks</title>
      <link>https://www.frankliu.org/hugo/posts/vector-clocks/</link>
      <pubDate>Sat, 12 Oct 2019 12:46:54 -0700</pubDate>
      
      <guid>https://www.frankliu.org/hugo/posts/vector-clocks/</guid>
      <description>vector clocks A, B, C, D are trying to set a date.
 Alice starts off (Wed, (A:1)) (Tue, (A:1,B:1)) (Tue, (A:1,B:1,D:1)) (Thu, (A:1,C:1)) -&amp;gt; Conflict  (A:1,C:1) did not descencd from (A:1,B:1,D:1)
Descend Each marker in vclk2 must have corresponding or greater marker than in vclk1
Resolve (Thu, (A:1, B:1, C:1, D:2))
problems width of vector clock grows with number of actors, or clients.
 keep growth under control with timestamp to prune old clocks  revisited Actor Some entity in the system that makes an update to an object</description>
    </item>
    
    <item>
      <title>R lang</title>
      <link>https://www.frankliu.org/hugo/posts/rlang/</link>
      <pubDate>Fri, 04 Oct 2019 22:35:02 -0700</pubDate>
      
      <guid>https://www.frankliu.org/hugo/posts/rlang/</guid>
      <description>operators Exponent: ^ Bit: &amp;amp; | Conditional: &amp;amp;&amp;amp; ||
difference between = and &amp;lt;- operators Just use =
vectors (range)  everything is a vector 1:9, 1:2:9, c(1,3,2,-8.1) c() for concat  vector addition  v1 + v2 : element wise  matrices  matrix(c(1,2,3,4,5,6,7,8,9), nrow=3) nrow is the number of rows or ncol for number of columns fills in column order, i.e. [[1,4,7],[2,5,8],[3,6,9]] matrix(1:9, nrow=3, byrow=T) : fills in row order  matrix multiplication  m1 %*% m2  transpose  t(m1)  slicing  m1[1,3] m1[,3] : all elements on third column m1[1,] : all elements on first rows m1[,-2] : all but the second column m1[1,1] = 15 m1[,2:3] = 1 : set columns 2 and 3 to 2 m1[,2:3] = 4:9 : set columns 2 and 3 to col2:4,5,6, col3:7,8,9 m1[m1&amp;gt;5] : filter elements in m1 that are greater than 5 m1[m1&amp;gt;5] = 3 : set all elements greater than 5 to 3  loops for(i in 1:3) { print(i) } while(sum(v1)&amp;gt;=5) {}</description>
    </item>
    
    <item>
      <title>Spanner</title>
      <link>https://www.frankliu.org/hugo/posts/spanner/</link>
      <pubDate>Tue, 17 Sep 2019 18:45:19 -0700</pubDate>
      
      <guid>https://www.frankliu.org/hugo/posts/spanner/</guid>
      <description>Key to paper TrueTime exposes clock uncertainty, if the uncertainty is large, Spanner slows down to wait out the uncertainty. TS reflect serialization order, external consistency, or linearizability.
Spanner zones Zone  zonemaster assigns data to spanservers (1000) location proxies used by clients to locate spanservers  Spanserver  responsible for 1000 tablets  Tablet  (key: string, timestamp: int64) -&amp;gt; string more like multiversion kv store state store in a set of B-tree-like files and a write ahead log  in DFS called colossus   one Paxos state machine per tablet  Paxos  long time leader leases (10 sec) implements a consistently replicated bag of mappings writes initiates paxos protocol at leader reads access state directly from any replica set of replicas called Paxos group  Logs:  every &amp;lsquo;Paxos write&amp;rsquo; goes to tablet log and to Paxos logic  Replica leader  every leader replica implements a lock table contains the state for 2-phase locking  maps ranges of keys to lock states   leaders are long lived to maintain this lock table  performs poorly under optimistic concurrency control   replicas in paxos group called participant slaves implements a transaction manager  implements a participant leader used between other paxos groups for 2-phase commit    Participant/Coordinator  one participant leader (leader to a paxos group) is chosen as coordinator leader, other replica leader called coordinator slaves state of transaction manager store in underlying paxos group    Directory and placement directory  set of contiguous keys with common prefix unit of data placement -&amp;gt; same replica config unit of data movement between paxos groups  paxos group/tablet  contains multiple directories not necessarily lex.</description>
    </item>
    
    <item>
      <title>KMP and Aho-Corasick</title>
      <link>https://www.frankliu.org/hugo/posts/kmp/</link>
      <pubDate>Wed, 23 Oct 2019 22:43:03 -0700</pubDate>
      
      <guid>https://www.frankliu.org/hugo/posts/kmp/</guid>
      <description>Main concept of KMP Consider the following string:
\(\underbrace{a_1 a_2 a_3 a_4}_\text{text1}\)</description>
    </item>
    
    <item>
      <title>731 My Calendar II</title>
      <link>https://www.frankliu.org/hugo/posts/731-my-calendar-ii-segment-tree/</link>
      <pubDate>Thu, 03 Oct 2019 20:56:27 -0700</pubDate>
      
      <guid>https://www.frankliu.org/hugo/posts/731-my-calendar-ii-segment-tree/</guid>
      <description>Acknowledgement Taken from fun4leet&amp;rsquo;s My Calendar II wonderful article
tl;dr A max segment tree, with an incremental update function is sufficient for this problem. Max is used because such tree allows quick query of the max number of bookings given a range. Incremental update is useful because each time book is called, one needs to increment the bookings in a particular range.
Data structure 4 things: a range \([l,r]\), data, lazy flag</description>
    </item>
    
    <item>
      <title>920 Number of music playlists</title>
      <link>https://www.frankliu.org/hugo/posts/920-number-of-music-playlists/</link>
      <pubDate>Fri, 30 Aug 2019 19:13:32 -0700</pubDate>
      
      <guid>https://www.frankliu.org/hugo/posts/920-number-of-music-playlists/</guid>
      <description>Notes on solution to Leetcode 920 Let&amp;rsquo;s take the example from the article, songs: \(\left\{abcde\right\}\), playlist: \(abacabdcbaeacbd\),
\(\bar{x} = (1,2,4,7,11)\)
For \(\bar{x}\), each number in the n-tuple indicates a position in the playlist for the first occurrence of a particular unique song. The article uses 1-indexing so I will use the same to be consistent.
As an example for the \(\bar{x}\) above, consider the playlist family:
\(p_l = (1_1,2_2,c_3,3_4,c_5,c_6,4_7,c_8,c_9,c_{10},5_{11},c_{12},c_{13},c_{14})\)
Here I have used the numbers (characters) \(1-5\), to indicate a song number, instead of the \(a-e\) in the article.</description>
    </item>
    
    <item>
      <title>Setting up mathjax for hugo</title>
      <link>https://www.frankliu.org/hugo/posts/mathjax-hugo/</link>
      <pubDate>Sat, 14 Sep 2019 19:10:31 -0700</pubDate>
      
      <guid>https://www.frankliu.org/hugo/posts/mathjax-hugo/</guid>
      <description>Problem Adding mathjax support for posts
Solution  Modify the current theme Add a partial template Add a parameter called mathjax: true in the frontmatter  Details Modifying the current theme  Note that the current theme is set in config.tolm  theme = &amp;#34;ananke&amp;#34; </description>
    </item>
    
    <item>
      <title>DynamoDB</title>
      <link>https://www.frankliu.org/hugo/posts/dynamo/</link>
      <pubDate>Sun, 15 Sep 2019 15:25:05 -0700</pubDate>
      
      <guid>https://www.frankliu.org/hugo/posts/dynamo/</guid>
      <description>Highlights  kv store data partitioning and replication by consistent hashing consistency facilitated by object versioning consistency among replicas during update by quorum decentralized replica synchronization gossip based distributed failure detection and membership  Background  Authors confuse &amp;lsquo;C&amp;rsquo; in ACID with &amp;lsquo;C&amp;rsquo; in CAP  2.3  optimistic replication - conflict resolution when you need item allow writes/updates - &amp;ldquo;always writable&amp;rdquo; pushes complex conflict resolution on the reader  at data store means &amp;ldquo;last write wins&amp;rdquo; too simple, allow client to do the conflict resolution    Related work  &amp;ldquo;always writable&amp;rdquo; requirement trusted nodes simple k-v latency ~ 100-200ms  zero-hop DHT, each node can route request to appropriate node      System architecture  components:  data persistence component load balancing membership failure detection failure recovery replica synchronization overload handling state transfer concurrency job scheduling request marshalling request routing system monitoring system alarming configuration management   cover:  partitioning replication versioning membership failure handling scaling    system interface  api get and put get(key)  locates object replicas returns with conflicting versions returns with a context   put(key, context, object)  determines which replica context : metadata such as version   key and object are opaque array of bytes  use MD5 hash to generate a 128-bit id    partitioning  consistent hashing each node assigned a random position in the ring each data item hashed to ring and served by first node larger position each node serves data between it and its predecessor each node actually mapped to multiple points in the ring (tokens) virtual node advantages  if node goes down, load gets handled more evenly by other nodes    replication  data item is replicated at \(N\) hosts each key assigned to a coordinator node coordinator is in charge of replication of the data items that fall in its range coordinator replicates key at N-1 clockwise successor nodes in the ring  each node is responsible for between it and its \(N\) th predecessor   preference list is the list of nodes responsible for a key every node in the system can determine which nodes for a key the pref list skips positions in the ring to ensure that it contains only distinct physical nodes  data versioning  eventual consistency, data propagates asynchronously guarantees that writes cannot be forgotten or rejected  each modificaiton is a new and immutable version of the data   version branching can happen in the presence of failures resulting in conflicting versions, client must perform reconciliation vector clocks used to capture causality  (node, counter) if the counters of an object are less-than-or-equal to all the nodes in a second clock, the first is an ancestor   on update, client must specify which version is being updated  pass the context from earlier read       timestamp is used to truncate the clock which may be growing  get and put operations  route request through LB use partition aware client library that routes to coordinator requests received through a LB routed to any random node in ring  node will forward to the first among top \(N\) in preference list   quorum protocol \(R+W &amp;gt; N\) put(), coordinator generates vector clock for new version  sends to \(N\) highest-ranked reachable nodes if \(W-1\) nodes respond then the write is considered successful   get(), coordinator requests all existing versions of data forward for that key, wiates for \(R\) responses before returning value to client  handling failure   hinted handoff</description>
    </item>
    
    <item>
      <title>Sample</title>
      <link>https://www.frankliu.org/hugo/posts/sample/</link>
      <pubDate>Wed, 12 Aug 2020 15:35:39 -0700</pubDate>
      
      <guid>https://www.frankliu.org/hugo/posts/sample/</guid>
      <description>Is this one working</description>
    </item>
    
    <item>
      <title>Fb Distributed Data Store Tao</title>
      <link>https://www.frankliu.org/hugo/posts/fb-distributed-data-store-tao/</link>
      <pubDate>Fri, 30 Aug 2019 19:13:32 -0700</pubDate>
      
      <guid>https://www.frankliu.org/hugo/posts/fb-distributed-data-store-tao/</guid>
      <description>intro   read-optimized social graph memcache and look-aside    The distinction between look-aside and look-through caches is not whether data is fetched from the cache and memory in serial or in parallel. The distinction is whether the fetch to memory on a cache miss originates from the caller or the cache. If the fetch to memory originates from the caller on cache miss, then you’re using a look-aside cache.</description>
    </item>
    
  </channel>
</rss>