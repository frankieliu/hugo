<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>scalable on My New Hugo Site</title>
    <link>http://frankliu.org/hugo/categories/scalable/</link>
    <description>Recent content in scalable on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 15 Sep 2019 15:25:05 -0700</lastBuildDate>
    
	<atom:link href="http://frankliu.org/hugo/categories/scalable/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DynamoDB</title>
      <link>http://frankliu.org/hugo/posts/dynamo/</link>
      <pubDate>Sun, 15 Sep 2019 15:25:05 -0700</pubDate>
      
      <guid>http://frankliu.org/hugo/posts/dynamo/</guid>
      <description> Highlights  kv store data partitioning and replication by consistent hashing consistency facilitated by object versioning consistency among replicas during update by quorum decentralized replica synchronization gossip based distributed failure detection and membership  Background  Authors confuses &amp;lsquo;C&amp;rsquo; in ACID with &amp;lsquo;C&amp;rsquo; in CAP  2.3  optimistic replication - conflict resolution when you need item allow writes/updates - &amp;ldquo;always writable&amp;rdquo; pushes complex conflict resolution on the reader  at data store means &amp;ldquo;last write wins&amp;rdquo; too simple, allow client to do the conflict resolution   Related work  &amp;ldquo;always writable&amp;rdquo; requirement trusted nodes simple k-v latency ~ 100-200ms  zero-hop DHT, each node can route request to appropriate node     System architecture Conclusions  not very useful  </description>
    </item>
    
  </channel>
</rss>