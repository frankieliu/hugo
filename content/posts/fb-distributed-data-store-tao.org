---
title: "Fb Distributed Data Store Tao"
date: 2019-08-30T19:13:32-07:00
draft: false
---
# -*- mode: org -*-
#+STARTUP: indent hidestars showall

* intro 
read-optimized social graph
* memcache and look-aside
#+begin_quote
The distinction between look-aside and look-through caches is not whether data
is fetched from the cache and memory in serial or in parallel. The distinction
is whether the fetch to memory on a cache miss originates from the caller or the
cache. If the fetch to memory originates from the caller on cache miss, then
you’re using a look-aside cache. If the fetch to memory originates from the
cache on cache miss, then you’re using a look-through cache.
#+end_quote

1. @ FB, cache is controlled by client code
2. PHP abstraction direct r/w nodes and edges
* inefficient edge lists
1. kv cache not good for edges, must fetch entire edge list to change a single
   edge list
2. basic list support not sufficient for concurrent incremental updates to
   cached lists
* distributed control logic
1. control logic run on the clients which don't communication with each other
2. leases -> a general solution
3. fixed API, control logic moved into cache
* read-after-write consistency

